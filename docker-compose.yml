services:
  # --- Frontend ---
  frontend:
    container_name: iqap-frontend
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_REPORTING_URL=http://localhost:8002
    depends_on:
      - ai-orchestrator
      - reporting-service

  # --- Backend Services ---
  ai-orchestrator:
    container_name: ai-orchestrator
    build: ./services/ai-orchestrator
    ports:
      - "8000:8000"
    volumes:
      - ./services/ai-orchestrator:/app
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - DOCKER_ENV=true
    depends_on:
      - rabbitmq
      - discovery-service

  discovery-service:
    container_name: discovery-service
    build: ./services/discovery-service
    ports:
      - "8001:8001"
    shm_size: '2gb'
    environment:
      - PYTHONUNBUFFERED=1
      - DOCKER_ENV=true

  execution-orchestrator:
    container_name: execution-orchestrator
    build: ./services/execution-orchestrator
    volumes:
      - ./services/execution-orchestrator:/app
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - DOCKER_ENV=true
    depends_on:
      - rabbitmq

  execution-agent:
    build: ./services/execution-agent
    volumes:
      - ./services/execution-agent:/app
      - ./debug:/app/debug
    shm_size: '2gb'
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - DOCKER_ENV=true
    depends_on:
      - execution-orchestrator
      - postgres
      - minio

  reporting-service:
    container_name: reporting-service
    build: ./services/reporting-service
    ports:
      - "8002:8002"
    volumes:
      - ./services/reporting-service:/app
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - DOCKER_ENV=true
    depends_on:
      - postgres

  # --- Infrastructure ---
  postgres:
    container_name: iqap-postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: myidrajkumar@gmail.com
      PGADMIN_DEFAULT_PASSWORD: midas256
    ports:
      - "8900:80"

  rabbitmq:
    container_name: iqap-rabbitmq
    image: rabbitmq:3.12-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file: .env

  minio:
    container_name: iqap-minio
    image: minio/minio:latest
    ports:
      - "9000:9000"   # API Port
      - "9001:9001"   # Console Port
    volumes:
      - minio_data:/data
    env_file: .env
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    env_file: .env
    entrypoint: >
      /bin/sh -c "
      set -e;
      echo '--- Waiting for MinIO to be ready...';
      until mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}; do
        echo '... MinIO not ready, waiting 5 seconds';
        sleep 5;
      done;
      echo 'Host configured successfully.';
      mc mb myminio/test-artifacts --ignore-existing;
      echo 'Bucket created or already exists.';
      mc anonymous set download myminio/test-artifacts;
      echo 'Bucket policy set to public download.';
      echo '--- MinIO setup complete ---';
      "

volumes:
  postgres_data:
  minio_data: